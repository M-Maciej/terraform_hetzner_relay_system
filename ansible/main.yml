---
- name: Create SSH keys (bastion, internal, application)
  hosts: localhost
  gather_facts: false
  tags: ["keys", "create"]
  tasks:
    - name: Remove old bastion ssh key if exists
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - "~/.ssh/bastion_key_temp"
        - "~/.ssh/bastion_key_temp.pub"

    - name: Create bastion ssh key (no passphrase)
      command: ssh-keygen -t ecdsa -b 521 -N "" -f ~/.ssh/bastion_key_temp
      args:
        chdir: "../terraform"

    - name: Remove old internal ssh key if exists
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - "~/.ssh/internal_key_temp"
        - "~/.ssh/internal_key_temp.pub"

    - name: Create internal ssh key (no passphrase)
      command: ssh-keygen -t ecdsa -b 521 -N "" -f ~/.ssh/internal_key_temp
      args:
        chdir: "../terraform"

    - name: Remove old application ssh key if exists
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - "~/.ssh/application_key_temp"
        - "~/.ssh/application_key_temp.pub"

    - name: Create application ssh key (no passphrase)
      command: ssh-keygen -t ecdsa -b 521 -N "" -f ~/.ssh/application_key_temp
      args:
        chdir: "../terraform"

- name: Create all resources
  hosts: localhost
  gather_facts: false
  tags: ["create","change"]
  tasks:
    - name: Terraform INIT
      command: terraform init
      args:
        chdir: "../terraform"

    - name: Terraform PLAN (all resources)
      command: terraform plan -out=plan
      args:
        chdir: "../terraform"

    - name: Terraform APPLY (all resources)
      command: terraform apply -auto-approve plan
      args:
        chdir: "../terraform"

- name: Destroy all resources
  hosts: localhost
  gather_facts: false
  tags: ["destroy"]
  tasks:
    - name: Terraform DESTROY (all resources)
      command: terraform destroy -auto-approve
      args:
        chdir: "../terraform"

- name: Gather SSH chain info and create dynamic SSH config
  hosts: localhost
  gather_facts: false
  tags: ["chaininfo", "create", "change"]
  tasks:

    - name: Read Terraform outputs as JSON
      command: terraform output -json
      args:
        chdir: "../terraform"
      register: tf_outputs

    - name: Set facts from Terraform outputs
      set_fact:
        bastion_ip: "{{ (tf_outputs.stdout | from_json())['bastion_public_ip']['value'] }}"
        internal_ip: "{{ (tf_outputs.stdout | from_json())['internal_private_ip']['value'] }}"
        application_ip: "{{ (tf_outputs.stdout | from_json())['application_private_ip']['value'] }}"

    - name: Create custom SSH config
      copy:
        dest: "~/custom_ssh_config"
        content: |
          # First hop: Bastion server
          Host bastion
            HostName {{ bastion_ip }}
            User root
            IdentityFile ~/.ssh/bastion_key_temp
            StrictHostKeyChecking no
            UserKnownHostsFile /dev/null

          # Second hop: Internal server
          Host internal
            HostName {{ internal_ip }}
            User root
            IdentityFile ~/.ssh/internal_key_temp
            StrictHostKeyChecking no
            UserKnownHostsFile /dev/null
            ProxyJump bastion

          # Final destination: Application server
          Host application
            HostName {{ application_ip }}
            User root
            IdentityFile ~/.ssh/application_key_temp
            StrictHostKeyChecking no
            UserKnownHostsFile /dev/null
            ProxyJump internal

    - name: Print final multi-hop SSH command
      debug:
        msg: >-
          ssh -F ~/custom_ssh_config -o IdentitiesOnly=yes application
